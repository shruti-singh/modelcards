{"paragraphs": ["XLNet: Generalized Autoregressive Pretraining for Language Understanding. With the capability of modeling bidirectional contexts, denoising autoencoding based pretraining like BERT achieves better performance than pretraining approaches based on autoregressive language modeling. However, relying on corrupting the input with masks, BERT neglects dependency between the masked positions and suffers from a pretrain-finetune discrepancy. In light of these pros and cons, we propose XLNet, a generalized autoregressive pretraining method that (1) enables learning bidirectional contexts by maximizing the expected likelihood over all permutations of the factorization order and (2) overcomes the limitations of BERT thanks to its autoregressive formulation. Furthermore, XLNet integrates ideas from Transformer-XL, the state-of-the-art autoregressive model, into pretraining. Empirically, under comparable experiment settings, XLNet outperforms BERT on 20 tasks, often by a large margin, including question answering, natural language inference, sentiment analysis, and document ranking.1. XLNet: Generalized Autoregressive Pretraining for Language Understanding. With the capability of modeling bidirectional contexts, denoising autoencoding based pretraining like BERT achieves better performance than pretraining approaches based on autoregressive language modeling. However, relying on corrupting the input with masks, BERT neglects dependency between the masked positions and suffers from a pretrain-finetune discrepancy. In light of these pros and cons, we propose XLNet, a generalized autoregressive pretraining method that (1) enables learning bidirectional contexts by maximizing the expected likelihood over all permutations of the factorization order and (2) overcomes the limitations of BERT thanks to its autoregressive formulation. Furthermore, XLNet integrates ideas from Transformer-XL, the state-of-the-art autoregressive model, into pretraining.", "Empirically, under comparable experiment settings, XLNet outperforms BERT on 20 tasks, often by a large margin, including question answering, natural language inference, sentiment analysis, and document ranking.1. 1 Introduction. Unsupervised representation learning has been highly successful in the domain of natural language processing [7, 22, 27, 28, 10]. Typically, these methods first pretrain neural networks on large-scale unlabeled text corpora, and then finetune the models or representations on downstream tasks. Under this shared high-level idea, different unsupervised pretraining objectives have been explored in literature. Among them, autoregressive (AR) language modeling and autoencoding (AE) have been the two most successful pretraining objectives. AR language modeling seeks to estimate the probability distribution of a text corpus with an autoregressive model [7, 27, 28]. Specifically, given a text sequence x = (x1, \u00b7 \u00b7 \u00b7 , xT ), AR language modeling factorizes the likelihood into a forward product p(x) = \u220fT t=1 p(xt | x<t) or a backward\none p(x) = \u220f1 t=T p(xt | x>t). A parametric model (e.g. a neural network) is trained to model each conditional distribution. Since an AR language model is only trained to encode a uni-directional context (either forward or backward), it is not effective at modeling deep bidirectional contexts. On the contrary, downstream language understanding tasks often require bidirectional context information. This results in a gap between AR language modeling and effective pretraining. In comparison, AE based pretraining does not perform explicit density estimation but instead aims to reconstruct the original data from corrupted input. A notable example is BERT [10], which has been the state-of-the-art pretraining approach. Given the input token sequence, a certain portion of tokens are replaced by a special symbol [MASK], and the model is trained to recover the original tokens from the corrupted version.", "Since density estimation is not part of the objective, BERT is allowed to utilize \u2217Equal contribution. Order determined by swapping the one in [9]. 1Pretrained models and code are available at https://github.com/zihangdai/xlnet\n33rd Conference on Neural Information Processing Systems (NeurIPS 2019), Vancouver, Canada.\nar X\niv :1\n90 6.\n08 23\n7v 2\n[ cs\n.C L\n] 2\nJ an\n2 02\nbidirectional contexts for reconstruction. As an immediate benefit, this closes the aforementioned bidirectional information gap in AR language modeling, leading to improved performance. However, the artificial symbols like [MASK] used by BERT during pretraining are absent from real data at finetuning time, resulting in a pretrain-finetune discrepancy. Moreover, since the predicted tokens are masked in the input, BERT is not able to model the joint probability using the product rule as in AR language modeling. In other words, BERT assumes the predicted tokens are independent of each other given the unmasked tokens, which is oversimplified as high-order, long-range dependency is prevalent in natural language [9]. Faced with the pros and cons of existing language pretraining objectives, in this work, we propose XLNet, a generalized autoregressive method that leverages the best of both AR language modeling and AE while avoiding their limitations. \u2022 Firstly, instead of using a fixed forward or backward factorization order as in conventional AR models, XLNet maximizes the expected log likelihood of a sequence w.r.t. all possible permutations of the factorization order. Thanks to the permutation operation, the context for each position can consist of tokens from both left and right. In expectation, each position learns to utilize contextual information from all positions, i.e., capturing bidirectional context. \u2022 Secondly, as a generalized AR language model, XLNet does not rely on data corruption. Hence, XLNet does not suffer from the pretrain-finetune discrepancy that BERT is subject to.", "Meanwhile, the autoregressive objective also provides a natural way to use the product rule for factorizing the joint probability of the predicted tokens, eliminating the independence assumption made in BERT. In addition to a novel pretraining objective, XLNet improves architectural designs for pretraining. \u2022 Inspired by the latest advancements in AR language modeling , XLNet integrates the segment recurrence mechanism and relative encoding scheme of Transformer-XL [9] into pretraining, which empirically improves the performance especially for tasks involving a longer text sequence. \u2022 Naively applying a Transformer(-XL) architecture to permutation-based language modeling does not work because the factorization order is arbitrary and the target is ambiguous. As a solution, we propose to reparameterize the Transformer(-XL) network to remove the ambiguity. Empirically, under comparable experiment setting, XLNet consistently outperforms BERT [10] on a wide spectrum of problems including GLUE language understanding tasks, reading comprehension tasks like SQuAD and RACE, text classification tasks such as Yelp and IMDB, and the ClueWeb09-B document ranking task. Related Work The idea of permutation-based AR modeling has been explored in [32, 12], but there are several key differences. Firstly, previous models aim to improve density estimation by baking an \u201corderless\u201d inductive bias into the model while XLNet is motivated by enabling AR language models to learn bidirectional contexts. Technically, to construct a valid target-aware prediction distribution, XLNet incorporates the target position into the hidden state via two-stream attention while previous permutation-based AR models relied on implicit position awareness inherent to their MLP architectures. Finally, for both orderless NADE and XLNet, we would like to emphasize that \u201corderless\u201d does not mean that the input sequence can be randomly permuted but that the model allows for different factorization orders of the distribution.", "Another related idea is to perform autoregressive denoising in the context of text generation [11], which only considers a fixed order though. 2 Proposed Method. 2.1 Background. In this section, we first review and compare the conventional AR language modeling and BERT for language pretraining. Given a text sequence x = [x1, \u00b7 \u00b7 \u00b7 , xT ], AR language modeling performs pretraining by maximizing the likelihood under the forward autoregressive factorization:\nmax \u03b8 log p\u03b8(x) = T\u2211 t=1 log p\u03b8(xt | x<t) = T\u2211 t=1 log exp\n( h\u03b8(x1:t\u22121) >e(xt) )\u2211\nx\u2032 exp (h\u03b8(x1:t\u22121) >e(x\u2032))\n, (1)\nwhere h\u03b8(x1:t\u22121) is a context representation produced by neural models, such as RNNs or Transformers, and e(x) denotes the embedding of x. In comparison, BERT is based on denoising auto-encoding. Specifically, for a text sequence x, BERT first constructs a corrupted version x\u0302 by randomly setting a portion (e.g. 15%) of tokens in x to a special symbol [MASK]. Let the masked tokens be x\u0304. The training objective is to reconstruct x\u0304 from x\u0302:\nmax \u03b8 log p\u03b8(x\u0304 | x\u0302) \u2248 T\u2211 t=1 mt log p\u03b8(xt | x\u0302) = T\u2211 t=1 mt log exp\n( H\u03b8(x\u0302) > t e(xt) ) \u2211 x\u2032 exp ( H\u03b8(x\u0302)>t e(x \u2032) ) , (2)\nwhere mt = 1 indicates xt is masked, and H\u03b8 is a Transformer that maps a length-T text sequence x into a sequence of hidden vectors H\u03b8(x) = [H\u03b8(x)1, H\u03b8(x)2, \u00b7 \u00b7 \u00b7 , H\u03b8(x)T ]. The pros and cons of the two pretraining objectives are compared in the following aspects:\n\u2022 Independence Assumption: As emphasized by the \u2248 sign in Eq. (2), BERT factorizes the joint conditional probability p(x\u0304 | x\u0302) based on an independence assumption that all masked tokens x\u0304 are separately reconstructed. In comparison, the AR language modeling objective (1) factorizes p\u03b8(x) using the product rule that holds universally without such an independence assumption. \u2022 Input noise: The input to BERT contains artificial symbols like [MASK] that never occur in downstream tasks, which creates a pretrain-finetune discrepancy.", "Replacing [MASK] with original tokens as in [10] does not solve the problem because original tokens can be only used with a small probability \u2014 otherwise Eq. (2) will be trivial to optimize. In comparison, AR language modeling does not rely on any input corruption and does not suffer from this issue. \u2022 Context dependency: The AR representation h\u03b8(x1:t\u22121) is only conditioned on the tokens up to position t (i.e. tokens to the left), while the BERT representation H\u03b8(x)t has access to the contextual information on both sides. As a result, the BERT objective allows the model to be pretrained to better capture bidirectional context. 2.2 Objective: Permutation Language Modeling. According to the comparison above, AR language modeling and BERT possess their unique advantages over the other. A natural question to ask is whether there exists a pretraining objective that brings the advantages of both while avoiding their weaknesses. Borrowing ideas from orderless NADE [32], we propose the permutation language modeling objective that not only retains the benefits of AR models but also allows models to capture bidirectional contexts. Specifically, for a sequence x of length T , there are T ! different orders to perform a valid autoregressive factorization. Intuitively, if model parameters are shared across all factorization orders, in expectation, the model will learn to gather information from all positions on both sides. To formalize the idea, let ZT be the set of all possible permutations of the length-T index sequence [1, 2, . . . , T ]. We use zt and z<t to denote the t-th element and the first t\u22121 elements of a permutation z \u2208 ZT . Then, our proposed permutation language modeling objective can be expressed as follows:\nmax \u03b8 Ez\u223cZT [ T\u2211 t=1 log p\u03b8(xzt | xz<t) ] . (3)\nEssentially, for a text sequence x, we sample a factorization order z at a time and decompose the likelihood p\u03b8(x) according to factorization order.", "Since the same model parameter \u03b8 is shared across all factorization orders during training, in expectation, xt has seen every possible element xi 6= xt in the sequence, hence being able to capture the bidirectional context. Moreover, as this objective fits into the AR framework, it naturally avoids the independence assumption and the pretrain-finetune discrepancy discussed in Section 2.1.\nRemark on Permutation The proposed objective only permutes the factorization order, not the sequence order. In other words, we keep the original sequence order, use the positional encodings corresponding to the original sequence, and rely on a proper attention mask in Transformers to achieve permutation of the factorization order. Note that this choice is necessary, since the model will only encounter text sequences with the natural order during finetuning. To provide an overall picture, we show an example of predicting the token x3 given the same input sequence x but under different factorization orders in the Appendix A.7 with Figure 4.\n2.3 Architecture: Two-Stream Self-Attention for Target-Aware Representations. While the permutation language modeling objective has desired properties, naive implementation with standard Transformer parameterization may not work. To see the problem, assume we parameterize the next-token distribution p\u03b8(Xzt | xz<t) using the standard Softmax formulation, i.e., p\u03b8(Xzt = x | xz<t) = exp(e(x)>h\u03b8(xz<t )) \u2211 x\u2032 exp(e(x\u2032)>h\u03b8(xz<t ))\n, where h\u03b8(xz<t) denotes the hidden representation of xz<t produced by the shared Transformer network after proper masking. Now notice that the representation h\u03b8(xz<t) does not depend on which position it will predict, i.e., the value of zt. Consequently, the same distribution is predicted regardless of the target position, which is not able to learn useful representations (see Appendix A.1 for a concrete example). To avoid this problem, we propose to re-parameterize the next-token distribution to be target position aware:", "p\u03b8(Xzt = x | xz<t) = exp\n( e(x)>g\u03b8(xz<t , zt) )\u2211 x\u2032 exp (e(x \u2032)>g\u03b8(xz<t , zt)) , (4)\nwhere g\u03b8(xz<t , zt) denotes a new type of representations which additionally take the target position zt as input. Two-Stream Self-Attention While the idea of target-aware representations removes the ambiguity in target prediction, how to formulate g\u03b8(xz<t , zt) remains a non-trivial problem. Among other possibilities, we propose to \u201cstand\u201d at the target position zt and rely on the position zt to gather information from the context xz<t through attention. For this parameterization to work, there are two requirements that are contradictory in a standard Transformer architecture: (1) to predict the token xzt , g\u03b8(xz<t , zt) should only use the position zt and not the content xzt , otherwise the objective becomes trivial; (2) to predict the other tokens xzj with j > t, g\u03b8(xz<t , zt) should also encode the content xzt to provide full contextual information. To resolve such a contradiction, we propose to use two sets of hidden representations instead of one:\n\u2022 The content representation h\u03b8(xz\u2264t), or abbreviated as hzt , which serves a similar role to the standard hidden states in Transformer. This representation encodes both the context and xzt itself. \u2022 The query representation g\u03b8(xz<t , zt), or abbreviated as gzt , which only has access to the contextual information xz<t and the position zt, but not the content xzt , as discussed above. Computationally, the first layer query stream is initialized with a trainable vector, i.e. g(0)i = w, while the content stream is set to the corresponding word embedding, i.e. h(0)i = e(xi). For each self-attention layer m = 1, . . . ,M , the two streams of representations are schematically2 updated\n2To avoid clutter, we omit the implementation details including multi-head attention, residual connection, layer normalization and position-wise feed-forward as used in Transformer(-XL). The details are included in Appendix A.2 for reference.", "with a shared set of parameters as follows (illustrated in Figures 1 (a) and (b)):\ng(m)zt \u2190 Attention(Q = g (m\u22121) zt ,KV = h (m\u22121) z<t ; \u03b8), (query stream: use zt but cannot see xzt) h(m)zt \u2190 Attention(Q = h (m\u22121) zt ,KV = h (m\u22121) z\u2264t ; \u03b8), (content stream: use both zt and xzt). where Q, K, V denote the query, key, and value in an attention operation [33]. The update rule of the content representations is exactly the same as the standard self-attention, so during finetuning, we can simply drop the query stream and use the content stream as a normal Transformer(-XL). Finally, we can use the last-layer query representation g(M)zt to compute Eq. (4). Partial Prediction While the permutation language modeling objective (3) has several benefits, it is a much more challenging optimization problem due to the permutation and causes slow convergence in preliminary experiments. To reduce the optimization difficulty, we choose to only predict the last tokens in a factorization order. Formally, we split z into a non-target subsequence z\u2264c and a target subsequence z>c, where c is the cutting point. The objective is to maximize the log-likelihood of the target subsequence conditioned on the non-target subsequence, i.e.,\nmax \u03b8\nEz\u223cZT [ log p\u03b8(xz>c | xz\u2264c) ] = Ez\u223cZT  |z|\u2211 t=c+1 log p\u03b8(xzt | xz<t) . (5) Note that z>c is chosen as the target because it possesses the longest context in the sequence given the current factorization order z. A hyperparameter K is used such that about 1/K tokens are selected for predictions; i.e., |z| /(|z| \u2212 c) \u2248 K. For unselected tokens, their query representations need not be computed, which saves speed and memory. 2.4 Incorporating Ideas from Transformer-XL. Since our objective function fits in the AR framework, we incorporate the state-of-the-art AR language model, Transformer-XL [9], into our pretraining framework, and name our method after it.", "We integrate two important techniques in Transformer-XL, namely the relative positional encoding scheme and the segment recurrence mechanism. We apply relative positional encodings based on the original sequence as discussed earlier, which is straightforward. Now we discuss how to integrate the recurrence mechanism into the proposed permutation setting and enable the model to reuse hidden states from previous segments. Without loss of generality, suppose we have two segments taken from a long sequence s; i.e., x\u0303 = s1:T and x = sT+1:2T . Let z\u0303 and z be permutations of [1 \u00b7 \u00b7 \u00b7T ] and [T + 1 \u00b7 \u00b7 \u00b7 2T ] respectively. Then, based on the permutation z\u0303, we process the first segment, and then cache the obtained content representations h\u0303(m) for each layer m. Then, for the next segment x, the attention update with memory can be written as\nh(m)zt \u2190 Attention(Q = h (m\u22121) zt ,KV = [ h\u0303(m\u22121),h(m\u22121)z\u2264t ] ; \u03b8)\nwhere [., .] denotes concatenation along the sequence dimension. Notice that positional encodings only depend on the actual positions in the original sequence. Thus, the above attention update is independent of z\u0303 once the representations h\u0303(m) are obtained. This allows caching and reusing the memory without knowing the factorization order of the previous segment. In expectation, the model learns to utilize the memory over all factorization orders of the last segment. The query stream can be computed in the same way. Finally, Figure 1 (c) presents an overview of the proposed permutation language modeling with two-stream attention (see Appendix A.7 for more detailed illustration). 2.5 Modeling Multiple Segments. Many downstream tasks have multiple input segments, e.g., a question and a context paragraph in question answering. We now discuss how we pretrain XLNet to model multiple segments in the autoregressive framework.", "During the pretraining phase, following BERT, we randomly sample two segments (either from the same context or not) and treat the concatenation of two segments as one sequence to perform permutation language modeling. We only reuse the memory that belongs to the same context. Specifically, the input to our model is the same as BERT: [CLS, A, SEP, B, SEP], where \u201cSEP\u201d and \u201cCLS\u201d are two special symbols and \u201cA\u201d and \u201cB\u201d are the two segments. Although\nwe follow the two-segment data format, XLNet-Large does not use the objective of next sentence prediction [10] as it does not show consistent improvement in our ablation study (see Section 3.4). Relative Segment Encodings Architecturally, different from BERT that adds an absolute segment embedding to the word embedding at each position, we extend the idea of relative encodings from Transformer-XL to also encode the segments. Given a pair of positions i and j in the sequence, if i and j are from the same segment, we use a segment encoding sij = s+ or otherwise sij = s\u2212, where s+ and s\u2212 are learnable model parameters for each attention head. In other words, we only consider whether the two positions are within the same segment, as opposed to considering which specific segments they are from. This is consistent with the core idea of relative encodings; i.e., only modeling the relationships between positions. When i attends to j, the segment encoding sij is used to compute an attention weight aij = (qi + b)\n>sij , where qi is the query vector as in a standard attention operation and b is a learnable head-specific bias vector. Finally, the value aij is added to the normal attention weight. There are two benefits of using relative segment encodings. First, the inductive bias of relative encodings improves generalization [9]. Second, it opens the possibility of finetuning on tasks that have more than two input segments, which is not possible using absolute segment encodings. 2.6 Discussion. Comparing Eq.", "(2) and (5), we observe that both BERT and XLNet perform partial prediction, i.e., only predicting a subset of tokens in the sequence. This is a necessary choice for BERT because if all tokens are masked, it is impossible to make any meaningful predictions. In addition, for both BERT and XLNet, partial prediction plays a role of reducing optimization difficulty by only predicting tokens with sufficient context. However, the independence assumption discussed in Section 2.1 disables BERT to model dependency between targets. To better understand the difference, let\u2019s consider a concrete example [New, York, is, a, city]. Suppose both BERT and XLNet select the two tokens [New, York] as the prediction targets and maximize log p(New York | is a city). Also suppose that XLNet samples the factorization order [is, a, city, New, York]. In this case, BERT and XLNet respectively reduce to the following objectives:\nJBERT = log p(New | is a city) + log p(York | is a city), JXLNet = log p(New | is a city) + log p(York | New, is a city). Notice that XLNet is able to capture the dependency between the pair (New, York), which is omitted by BERT. Although in this example, BERT learns some dependency pairs such as (New, city) and (York, city), it is obvious that XLNet always learns more dependency pairs given the same target and contains \u201cdenser\u201d effective training signals. For more formal analysis and further discussion, please refer to Appendix A.5. 3 Experiments. 3.1 Pretraining and Implementation. Following BERT [10], we use the BooksCorpus [40] and English Wikipedia as part of our pretraining data, which have 13GB plain text combined. In addition, we include Giga5 (16GB text) [26], ClueWeb 2012-B (extended from [5]), and Common Crawl [6] for pretraining. We use heuristics to aggressively filter out short or low-quality articles for ClueWeb 2012-B and Common Crawl, which results in 19GB and 110GB text respectively.", "After tokenization with SentencePiece [17], we obtain 2.78B, 1.09B, 4.75B, 4.30B, and 19.97B subword pieces for Wikipedia, BooksCorpus, Giga5, ClueWeb, and Common Crawl respectively, which are 32.89B in total. Our largest model XLNet-Large has the same architecture hyperparameters as BERT-Large, which results in a similar model size. During pretraining, we always use a full sequence length of 512. Firstly, to provide a fair comparison with BERT (section 3.2), we also trained XLNet-Large-wikibooks on BooksCorpus and Wikipedia only, where we reuse all pretraining hyper-parameters as in the original BERT. Then, we scale up the training of XLNet-Large by using all the datasets described above. Specifically, we train on 512 TPU v3 chips for 500K steps with an Adam weight decay optimizer, linear learning rate decay, and a batch size of 8192, which takes about 5.5 days. It was\nobserved that the model still underfits the data at the end of training. Finally, we perform ablation study (section 3.4) based on the XLNet-Base-wikibooks. Since the recurrence mechanism is introduced, we use a bidirectional data input pipeline where each of the forward and backward directions takes half of the batch size. For training XLNet-Large, we set the partial prediction constant K as 6 (see Section 2.3). Our finetuning procedure follows BERT [10] except otherwise specified3. We employ an idea of span-based prediction, where we first sample a length L \u2208 [1, \u00b7 \u00b7 \u00b7 , 5], and then randomly select a consecutive span of L tokens as prediction targets within a context of (KL) tokens. We use a variety of natural language understanding datasets to evaluate the performance of our method. Detailed descriptions of the settings for all the datasets can be found in Appendix A.3.\n3.2 Fair Comparison with BERT. Here, we first compare the performance of BERT and XLNet in a fair setting to decouple the effects of using more data and the improvement from BERT to XLNet.", "In Table 1, we compare (1) best performance of three different variants of BERT and (2) XLNet trained with the same data and hyperparameters. As we can see, trained on the same data with an almost identical training recipe, XLNet outperforms BERT by a sizable margin on all the considered datasets. 3.3 Comparison with RoBERTa: Scaling Up. RACE Accuracy Middle High Model NDCG@20 ERR@20. After the initial publication of our manuscript, a few other pretrained models were released such as RoBERTa [21] and ALBERT [19]. Since ALBERT involves increasing the model hidden size from 1024 to 2048/4096 and thus substantially increases the amount of computation in terms of FLOPs, we exclude ALBERT from the following results as it is hard to lead to scientific conclusions. To obtain relatively fair comparison with RoBERTa, the experiment in this section is based on full data and reuses the hyper-parameters of RoBERTa, as described in section 3.1. The results are presented in Tables 2 (reading comprehension & document ranking), 3 (question answering), 4 (text classification) and 5 (natural language understanding), where XLNet generally outperforms BERT and RoBERTa. In addition, we make two more interesting observations:\n3Hyperparameters for pretraining and finetuning are in Appendix A.4. \u2022 For explicit reasoning tasks like SQuAD and RACE that involve longer context, the performance gain of XLNet is usually larger. This superiority at dealing with longer context could come from the Transformer-XL backbone in XLNet. \u2022 For classification tasks that already have abundant supervised examples such as MNLI (>390K), Yelp (>560K) and Amazon (>3M), XLNet still lead to substantial gains. 3.4 Ablation Study. We perform an ablation study to understand the importance of each design choice based on four datasets with diverse characteristics. Specifically, there are three main aspects we hope to study:\n\u2022", "The effectiveness of the permutation language modeling objective alone, especially compared to the denoising auto-encoding objective used by BERT. \u2022 The importance of using Transformer-XL as the backbone neural architecture. \u2022 The necessity of some implementation details including span-based prediction, the bidirectional\ninput pipeline, and next-sentence prediction. With these purposes in mind, in Table 6, we compare 6 XLNet-Base variants with different implementation details (rows 3 - 8), the original BERT-Base model (row 1), and an additional Transformer-XL baseline trained with the denoising auto-encoding (DAE) objective used in BERT but with the bidirectional input pipeline (row 2). For fair comparison, all models are based on a 12-layer architecture with the same model hyper-parameters as BERT-Base and are trained on only Wikipedia and the BooksCorpus. All results reported are the median of 5 runs. Examining rows 1 - 4 of Table 6, we can see both Transformer-XL and the permutation LM clearly contribute the superior performance of XLNet over BERT. Moreover, if we remove the memory caching mechanism (row 5), the performance clearly drops, especially for RACE which involves the longest context among the 4 tasks. In addition, rows 6 - 7 show that both span-based prediction and the bidirectional input pipeline play important roles in XLNet. Finally, we unexpectedly find the the next-sentence prediction objective proposed in the original BERT does not necessarily lead to an improvement in our setting. Hence, we exclude the next-sentence prediction objective from XLNet. Finally, we also perform a qualitative study of the attention patterns, which is included in Appendix A.6 due to page limit. 4 Conclusions. XLNet is a generalized AR pretraining method that uses a permutation language modeling objective to combine the advantages of AR and AE methods.", "The neural architecture of XLNet is developed to work seamlessly with the AR objective, including integrating Transformer-XL and the careful design of the two-stream attention mechanism. XLNet achieves substantial improvement over previous pretraining objectives on various tasks. Acknowledgments. The authors would like to thank Qizhe Xie and Adams Wei Yu for providing useful feedback on the project, Jamie Callan for providing the ClueWeb dataset, Youlong Cheng, Yanping Huang and Shibo Wang for providing ideas to improve our TPU implementation, Chenyan Xiong and Zhuyun Dai for clarifying the setting of the document ranking task. ZY and RS were supported by the Office of Naval Research grant N000141812861, the National Science Foundation (NSF) grant IIS1763562, the Nvidia fellowship, and the Siebel scholarship. ZD and YY were supported in part by NSF under the grant IIS-1546329 and by the DOE-Office of Science under the grant ASCR #KJ040201. A Target-Aware Representation via Two-Stream Self-Attention. A.1 A Concrete Example of How Standard LM Parameterization Fails. In this section, we provide a concrete example to show how the standard language model parameterization fails under the permutation objective, as discussed in Section 2.3. Specifically, let\u2019s consider two different permutations z(1) and z(2) satisfying the following relationship\nz (1) <t = z (2) <t = z<t but z (1) t = i 6= j = z (2) t . Then, substituting the two permutations respectively into the naive parameterization, we have\np\u03b8(Xi = x | xz<t)\ufe38 \ufe37\ufe37 \ufe38 z (1) t =i, z (1) <t=z<t = p\u03b8(Xj = x | xz<t)\ufe38 \ufe37\ufe37 \ufe38 z (1) t =j, z (2) <t=z<t = exp\n( e(x)>h(xz<t) )\u2211 x\u2032 exp (e(x \u2032)>h(xz<t)) . Effectively, two different target positions i and j share exactly the same model prediction. However, the ground-truth distribution of two positions should certainly be different. A.2 Two-Stream Attention. Here, we provide the implementation details of the two-stream attention with a Transformer-XL backbone. Initial represetation:\n\u2200t = 1, . . .", ", T : ht = e(xt) and gt = w Cached layer-m content represetation (memory) from previous segment: h\u0303(m) For the Transformer-XL layer m = 1, \u00b7 \u00b7 \u00b7 ,M , attention with relative positional encoding and position-wise feed-forward are consecutively employed to update the represetntations:\n\u2200t = 1, . . . , T : h\u0302(m)zt = LayerNorm ( h(m\u22121)zt + RelAttn ( h(m\u22121)zt , [ h\u0303(m\u22121),h(m\u22121)z\u2264t ])) h(m)zt = LayerNorm ( h\u0302(m)zt + PosFF ( h\u0302(m)zt\n)) g\u0302(m)zt = LayerNorm ( g(m\u22121)zt + RelAttn ( g(m\u22121)zt , [ h\u0303(m\u22121),h(m\u22121)z<t\n])) g(m)zt = LayerNorm ( g\u0302(m)zt + PosFF ( g\u0302(m)zt\n)) Target-aware prediction distribution:\np\u03b8(Xzt = x | xz<t) = exp\n( e(x)>g (M) zt ) \u2211 x\u2032 exp ( e(x\u2032)>g (M) zt\n) ,\nA.3 Datasets. A.3.1 RACE Dataset. The RACE dataset [18] contains near 100K questions taken from the English exams for middle and high school Chinese students in the age range between 12 to 18, with the answers generated by human experts. This is one of the most difficult reading comprehension datasets that involve challenging reasoning questions. Moreover, the average length of the passages in RACE are longer than 300, which is significantly longer than other popular reading comprehension datasets such as SQuAD [29]. As a result, this dataset serves as a challenging benchmark for long text understanding. We use a sequence length of 512 during finetuning. A.3.2 SQuAD. SQuAD is a large-scale reading comprehension dataset with two tasks. SQuAD1.1 [30] contains questions that always have a corresponding answer in the given passages, while SQuAD2.0 [29] introduces unanswerable questions. To finetune an XLNet on SQuAD2.0, we jointly apply a logistic regression loss for answerability prediction similar to classification tasks and a standard span extraction loss for question answering [10]. A.3.3 Text classification Datasets. Following previous work on text classification [39, 23], we evaluate XLNet on the following benchmarks: IMDB, Yelp-2, Yelp-5, DBpedia, AG, Amazon-2, and Amazon-5. A.3.4 GLUE Dataset.", "The GLUE dataset [34] is a collection of 9 natural language understanding tasks. The test set labels are removed from the publicly released version, and all the practitioners must submit their predictions on the evaluation server to obtain test set results. In Table 5, we present results of multiple settings, including single-task and multi-task, as well as single models and ensembles. In the multi-task setting, we jointly train an XLNet on the four largest datasets\u2014MNLI, SST-2, QNLI, and QQP\u2014and finetune the network on the other datasets. Only single-task training is employed for the four large datasets. For QNLI, we employed a pairwise relevance ranking scheme as in [20] for our test set submission. However, for fair comparison with BERT, our result on the QNLI dev set is based on a standard classification paradigm. For WNLI, we use the loss described in [16]. A.3.5 ClueWeb09-B Dataset. Following the setting in previous work [8], we use the ClueWeb09-B dataset to evaluate the performance on document ranking. The queries were created by the TREC 2009-2012 Web Tracks based on 50M documents and the task is to rerank the top 100 documents retrieved using a standard retrieval method. Since document ranking, or ad-hoc retrieval, mainly concerns the low-level representations instead of high-level semantics, this dataset serves as a testbed for evaluating the quality of word embeddings. We use a pretrained XLNet to extract word embeddings for the documents and queries without finetuning, and employ a kernel pooling network [36] to rank the documents. A.4 Hyperparameters. A.4.1 Pretraining Hyperparameters. The hyperparameters used for pretraining XLNet are shown in Table 7.\nA.4.2 Hyperparameters for Finetuning. The hyperparameters used for finetuning XLNet on various tasks are shown in Table 8. \u201cLayer-wise decay\u201d means exponentially decaying the learning rates of individual layers in a top-down manner.", "For example, suppose the 24-th layer uses a learning rate l, and the Layer-wise decay rate is \u03b1, then the learning rate of layer m is l\u03b124\u2212m.\nHparam RACE SQuAD MNLI Yelp-5. A.5 Discussion and Analysis. A.5.1 Comparison with BERT. To prove a general point beyond one example, we now turn to more formal expressions. Inspired by previous work [37], given a sequence x = [x1, \u00b7 \u00b7 \u00b7 , xT ], we define a set of target-context pairs of interest, I = {(x,U)}, where U is a set of tokens in x that form a context of x. Intuitively, we want the model to learn the dependency of x on U through a pretraining loss term log p(x | U). For example, given the above sentence, the pairs of interest I could be instantiated as:\nI = {( x = York,U = {New} ) , ( x = York,U = {city} ) , ( x = York,U = {New, city} ) , \u00b7 \u00b7 \u00b7 } . Note that I is merely a virtual notion without unique ground truth, and our analysis will hold regardless of how I is instantiated. Given a set of target tokens T and a set of non-target tokens N = x\\T , BERT and XLNet both maximize log p(T | N ) but with different formulations:\nJBERT = \u2211 x\u2208T log p(x | N ); JXLNet = \u2211 x\u2208T log p(x | N \u222a T<x)\nwhere T<x denote tokens in T that have a factorization order prior to x. Both objectives consist of multiple loss terms in the form of log p(x | Vx). Intuitively, if there exists a target-context pair (x,U) \u2208 I such that U \u2286 Vx, then the loss term log p(x | Vx) provides a training signal to the dependency between x and U . For convenience, we say a target-context pair (x,U) \u2208 I is covered by a model (objective) if U \u2286 Vx. Given the definition, let\u2019s consider two cases:\n\u2022 If U \u2286 N , the dependency (x,U) is covered by both BERT and XLNet. \u2022 If U \u2286 N \u222a T<x and U \u2229 T<x 6= \u2205, the dependency can only be covered by XLNet but not BERT. As a result, XLNet is able to cover more dependencies than BERT.", "In other words, the XLNet objective contains more effective training signals, which empirically leads to better performance in Section 3.\nA.5.2 Comparison with Language Modeling. Borrowing examples and notations from Section A.5.1, a standard AR language model like GPT [28] is only able to cover the dependency (x = York,U = {New}) but not (x = New,U = {York}). XLNet, on the other hand, is able to cover both in expectation over all factorization orders. Such a limitation of AR language modeling can be critical in real-world applications. For example, consider a span extraction question answering task with the context \u201cThom Yorke is the singer of Radiohead\u201d and the question \u201cWho is the singer of Radiohead\u201d. The representations of \u201cThom Yorke\u201d are not dependent on \u201cRadiohead\u201d with AR language modeling and thus they will not be chosen as the answer by the standard approach that employs softmax over all token representations. More formally, consider a context-target pair (x,U): \u2022 If U 6\u2286 T<x, where T<x denotes the tokens prior to x in the original sequence, AR language\nmodeling is not able to cover the dependency. \u2022 In comparison, XLNet is able to cover all dependencies in expectation. Approaches like ELMo [27] concatenate forward and backward language models in a shallow manner, which is not sufficient for modeling deep interactions between the two directions. A.5.3 Bridging the Gap Between Language Modeling and Pretraining. With a deep root in density estimation4 [4, 32, 24], language modeling has been a rapidly-developing research area [9, 1, 3]. However, there has been a gap between language modeling and pretraining due to the lack of the capability of bidirectional context modeling, as analyzed in Section A.5.2. It has even been challenged by some machine learning practitioners whether language modeling is a meaningful pursuit if it does not directly improve downstream tasks 5. XLNet generalizes language modeling and bridges such a gap.", "As a result, it further \u201cjustifies\u201d language modeling research. Moreover, it becomes possible to leverage the rapid progress of language modeling research for pretraining. As an example, we integrate Transformer-XL into XLNet to demonstrate the usefulness of the latest language modeling progress. A.6 Qualitative Analysis of Attention Patterns. We compare the attention pattern of BERT and XLNet without finetuning. Firstly, we found 4 typical patterns shared by both, as shown in Fig. 2.\nMore interestingly, in Fig. 3, we present 3 patterns that only appear in XLNet but not BERT: (a) The self-exclusion pattern attends to all other tokens but itself, probably offering a fast way to gather global information; (b) The relative-stride pattern attends to positions every a few stride apart relative to the query position; (c) The one-side masked pattern is very similar to the lower-left part of Fig. 1-(d), with the upper-right triangle masked out. It seems that the model learns not to attend the relative right half. Note that all these three unique patterns involve the relative positions rather than absolute ones, and hence are likely enabled by the \u201crelative attention\u201d mechanism in XLNet. We conjecture these unique patterns contribute to the performance advantage of XLNet. On the other hand, the proposed permutation LM objective mostly contributes to a better data efficiency, whose effects may not be obvious from qualitative visualization. A.7 Visualizing Memory and Permutation In this section, we provide a detailed visualization of the proposed permutation language modeling objective, including the mechanism of reusing memory (aka the recurrence mechanism), how we use attention masks to permute the factorization order, and the difference of the two attention streams. As shown in Figure 5 and 6, given the current position zt, the attention mask is decided by the permutation (or factorization order)", "z such that only tokens the occur before zt in the permutation can be attended; i.e., positions zi with i < t. Moreover, comparing Figure 5 and 6, we can see how the query stream and the content stream work differently with a specific permutation through attention masks. The main difference is that the query stream cannot do self-attention and does not have access to the token at the position, while the content stream performs normal self-attention. 4The problem of language modeling is essentially density estimation for text data. 5https://openreview.net/forum?id=HJePno0cYm\nJoint View of the Content Stream (Factorization order: 3 \u00e0 2 \u00e0 4 \u00e0 1)\nww w wmem(+) x#x% x' x(\ng# (%)g% (%) g' (%) g( (%)mem(%) h# (%)h% (%) h' (%) h( (%) g# (')g% (') g' (') g( (') h# (')h% (') h' (') h( (')"]}